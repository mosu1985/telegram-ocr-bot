print("=== GPT-4o ADVANCED FIXED BOT ===")

try:
    print("1. Importing libraries...")
    import sys
    try:
        if hasattr(sys.stdout, "reconfigure"):
            sys.stdout.reconfigure(encoding="utf-8")
        if hasattr(sys.stderr, "reconfigure"):
            sys.stderr.reconfigure(encoding="utf-8")
    except Exception as _enc_e:
        pass
    import base64
    import openai
    import hashlib
    import time
    import uuid
    import random
    import string
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
    from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters, ConversationHandler
    from datetime import datetime
    print("‚úÖ All libraries imported")

    print("2. Setting up configuration...")
    import os
    BOT_TOKEN = os.environ.get("BOT_TOKEN", "")
    TARGET_GROUP_ID = os.environ.get("TARGET_GROUP_ID", "")
    OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY", "")
    if not BOT_TOKEN or not TARGET_GROUP_ID or not OPENAI_API_KEY:
        raise RuntimeError("Missing required env vars: BOT_TOKEN, TARGET_GROUP_ID, OPENAI_API_KEY")
    print("‚úÖ Configuration set")

    print("3. Creating OpenAI client...")
    client = openai.OpenAI(api_key=OPENAI_API_KEY)
    print("‚úÖ OpenAI client created")

    print("4. Creating Telegram bot...")
    app = Application.builder().token(BOT_TOKEN).build()
    print("‚úÖ Telegram bot created")

    print("5. Defining handlers...")
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
    WAITING_FOR_PASSWORD = 1
    WAITING_FOR_PHONE = 2
    WAITING_FOR_EDIT = 3
    
    # –ü–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
    ACCESS_PASSWORD = "Bomondstaff"
    
    # –°—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    processed_count = 0
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_data = {}
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    authorized_users = {}
    
    def generate_random_string(length=10):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏"""
        return ''.join(random.choices(string.ascii_letters + string.digits, k=length))
    
    def save_authorization(user_id, phone_number):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª"""
        try:
            import json
            auth_file = "authorized_users.json"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            try:
                with open(auth_file, 'r', encoding='utf-8') as f:
                    auth_data = json.load(f)
            except FileNotFoundError:
                auth_data = {}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            auth_data[str(user_id)] = {
                'phone': phone_number,
                'authorized_at': datetime.now().isoformat()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
            with open(auth_file, 'w', encoding='utf-8') as f:
                json.dump(auth_data, f, ensure_ascii=False, indent=2)
            
            print(f"‚úÖ Authorization saved for user_id: {user_id}")
            
        except Exception as e:
            print(f"Error saving authorization: {e}")
    
    def load_authorizations():
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            import json
            auth_file = "authorized_users.json"
            
            with open(auth_file, 'r', encoding='utf-8') as f:
                auth_data = json.load(f)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for user_id_str, user_data in auth_data.items():
                user_id = int(user_id_str)
                authorized_users[user_id] = True
                print(f"‚úÖ Loaded authorization for user_id: {user_id}")
            
            print(f"‚úÖ Loaded {len(auth_data)} authorizations")
            
        except FileNotFoundError:
            print("‚ÑπÔ∏è No authorization file found, starting fresh")
        except Exception as e:
            print(f"Error loading authorizations: {e}")

    async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
        print("Start command received")
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user_id in authorized_users:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞
            try:
                import json
                auth_file = "authorized_users.json"
                with open(auth_file, 'r', encoding='utf-8') as f:
                    auth_data = json.load(f)
                
                if str(user_id) in auth_data:
                    phone_number = auth_data[str(user_id)]['phone']
                    context.user_data['user_phone'] = phone_number
                    print(f"‚úÖ Restored phone number for user_id: {user_id}: {phone_number}")
            except Exception as e:
                print(f"Error restoring phone number: {e}")
            
            await update.message.reply_text("ü§ñ –ü—Ä–∏–≤–µ—Ç! –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ —Å —Ä—É–∫–æ–ø–∏—Å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º!")
        else:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
            keyboard = [["üîê –í–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
            await update.message.reply_text(
                "üîê **–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω**\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞.\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            return WAITING_FOR_PASSWORD

    async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
        global processed_count
        try:
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if user_id not in authorized_users:
                await update.message.reply_text(
                    "üîê **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!**\n\n"
                    "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.",
                    parse_mode='Markdown'
                )
                return
            
            print("Photo received")
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            processed_count += 1
            
            # Get photo
            photo = update.message.photo[-1]
            file = await context.bot.get_file(photo.file_id)
            image_bytes = await file.download_as_bytearray()
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
            unique_id = str(uuid.uuid4())[:8]
            random_string = generate_random_string(15)
            timestamp = int(time.time())
            session_id = f"session_{timestamp}_{random_string}"
            
            # –°–æ–∑–¥–∞–µ–º —Ö–µ—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_hash = hashlib.md5(image_bytes).hexdigest()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user = update.effective_user
            user_name = user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            user_username = user.username or "–ù–µ—Ç"
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            user_phone = context.user_data.get('user_phone', "–ù–µ —É–∫–∞–∑–∞–Ω")
            
            print(f"üÜî Unique ID: {unique_id}")
            print(f"üé≤ Random string: {random_string}")
            print(f"üìä Processed count: {processed_count}")
            print(f"üïê Timestamp: {timestamp}")
            print(f"üñºÔ∏è Image hash: {image_hash[:8]}...")
            print(f"üë§ User ID: {user_id}")
            print(f"üë§ User Name: {user_name}")
            print(f"üë§ User Username: @{user_username}")
            print(f"üì± User Phone: {user_phone}")
            print(f"üÜî Session ID: {session_id}")
            
            await update.message.reply_text(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ #{processed_count} —Å –ø–æ–º–æ—â—å—é GPT-4o Advanced Fixed...")
            
            # Encode to base64
            base64_image = base64.b64encode(image_bytes).decode('utf-8')
            
            print("Sending to OpenAI...")
            
            # –¢–æ—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –ø–æ—Ä—è–¥–æ–∫ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            prompt = f"""–†–∞—Å–ø–æ–∑–Ω–∞–π —Ä—É–∫–æ–ø–∏—Å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –≠—Ç–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–£–ù–ò–ö–ê–õ–¨–ù–´–ô –ó–ê–ü–†–û–° #{processed_count}
–£–ù–ò–ö–ê–õ–¨–ù–´–ô ID: {unique_id}
–°–õ–£–ß–ê–ô–ù–ê–Ø –°–¢–†–û–ö–ê: {random_string}
–°–ï–°–°–ò–Ø: {session_id}
–í–†–ï–ú–Ø: {timestamp}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –°–û–ë–õ–Æ–î–ê–ô –¢–û–ß–ù–´–ô –ü–û–†–Ø–î–û–ö –°–¢–†–û–ö –° –§–û–¢–û - –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π –≤ –æ—Ç–≤–µ—Ç–µ
2. –¢–û–ß–ù–û –ö–û–ü–ò–†–£–ô –ö–û–õ–ò–ß–ï–°–¢–í–ê - –µ—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–Ω–æ "6 –∫–≥", —Ç–æ –∏ –ø–∏—à–∏ "6 –∫–≥"
3. –°–û–•–†–ê–ù–Ø–ô –ï–î–ò–ù–ò–¶–´ –ò–ó–ú–ï–†–ï–ù–ò–Ø - –∫–≥, —à—Ç, –ø—É—á–∫–∏, —è—â–∏–∫–∏, –≥–æ–ª–æ–≤–∫–∏
4. –ß–∏—Ç–∞–π —Å—Ç—Ä–æ–∫–∏ –°–í–ï–†–•–£ –í–ù–ò–ó –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, –∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ

–ü–†–û–î–£–ö–¢–´ –î–õ–Ø –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø:
- –ª—É–∫ —Ñ–∏–æ–ª–µ—Ç–æ–≤, –ª—É–∫ –∑–µ–ª–µ–Ω—ã–π, –±–µ–ª—ã–π –ª—É–∫
- –º–æ—Ä–∫–æ–≤–∫–∞, –∫–∞—Ä—Ç–æ—à–∫–∞ (–º–µ–ª–∫–∞—è, –∫—Ä—É–ø–Ω–∞—è)
- —á–µ—Ä–∏, –ª–∏—Å—Ç—å—è —Å–∞–ª–∞—Ç–∞, –º–∏–∫—Å, –∞–π—Å–±–µ—Ä–≥
- –ª–∏–º–æ–Ω—ã, –ø–µ—Ç—Ä—É—à–∫–∞, —É–∫—Ä–æ–ø, —á–µ—Å–Ω–æ–∫
- –±–æ–ª–≥–∞—Ä—Å–∫–∏–π –ø–µ—Ä–µ—Ü, –∫–∞–ø—É—Å—Ç–∞, –±–∞–∫–ª–∞–∂–∞–Ω
- –∞–ø–µ–ª—å—Å–∏–Ω—ã, –∏–º–±–∏—Ä—å, –∫–∞–±–∞—á–æ–∫, —è–±–ª–æ–∫–∏
- –≥—Ä–µ–π–ø—Ñ—Ä—É—Ç, –∫–∏–≤–∏, –ø–æ–º–∏–¥–æ—Ä—ã, –æ–≥—É—Ä—Ü—ã

–ï–î–ò–ù–ò–¶–´ –ò–ó–ú–ï–†–ï–ù–ò–Ø:
- –∫–≥ (–∫–∏–ª–æ–≥—Ä–∞–º–º—ã)
- —à—Ç (—à—Ç—É–∫–∏)
- –ø—É—á–∫–∏, –ø—É—á–∫–∞
- —è—â–∏–∫–∏, —è—â–∏–∫
- –≥–æ–ª–æ–≤–∫–∏, –≥–æ–ª–æ–≤–∫–∞

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
- –ö–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
- –§–æ—Ä–º–∞—Ç: "–ü—Ä–æ–¥—É–∫—Ç - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
- –ü—Ä–∏–º–µ—Ä: "–õ—É–∫ —Ñ–∏–æ–ª–µ—Ç–æ–≤ - 6 –∫–≥"
- –°–û–ë–õ–Æ–î–ê–ô –¢–û–ß–ù–´–ô –ü–û–†–Ø–î–û–ö –° –§–û–¢–û

–í–ê–ñ–ù–û: 
- –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ = –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ
- –¢–æ—á–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
- –°–æ—Ö—Ä–∞–Ω—è–π –≤—Å–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
- –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ"""

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º GPT-4o-mini –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–¥–µ–ª—å
            try:
                print("Using GPT-4.1 model...")
                response = client.chat.completions.create(
                    model="gpt-4.1",
                    messages=[
                        {
                            "role": "user",
                            "content": [
                                {
                                    "type": "text",
                                    "text": prompt
                                },
                                {
                                    "type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"}
                                }
                            ]
                        }
                    ],
                    max_tokens=2000,
                    temperature=0.1
                )
                used_model = "gpt-4.1"
                print(f"‚úÖ Successfully used model: {used_model}")
                
            except Exception as e:
                print(f"‚ùå GPT-4.1 failed: {e}")
                # Fallback to GPT-4o if GPT-4o-mini fails
                print("Trying GPT-4o as fallback...")
                response = client.chat.completions.create(
                    model="gpt-4o",
                    messages=[
                        {
                            "role": "user",
                            "content": [
                                {
                                    "type": "text",
                                    "text": prompt
                                },
                                {
                                    "type": "image_url",
                                    "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"}
                                }
                            ]
                        }
                    ],
                    max_tokens=2000,
                    temperature=0.1
                )
                used_model = "gpt-4o (fallback)"
                print(f"‚úÖ Using fallback model: {used_model}")
            
            recognized_text = response.choices[0].message.content.strip()
            print(f"üìù Recognized: '{recognized_text}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ –æ—Ç–≤–µ—Ç
            if not recognized_text or recognized_text.lower() in ['', 'none', '–ø—É—Å—Ç–æ', '–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞', '—Ç–µ–∫—Å—Ç –Ω–µ –≤–∏–¥–µ–Ω', '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ']:
                error_message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Ç–µ–º–Ω–æ–µ/—Å–≤–µ—Ç–ª–æ–µ\n‚Ä¢ –¢–µ–∫—Å—Ç –Ω–µ—á–µ—Ç–∫–∏–π\n‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å–Ω–æ–≤–∞ —Å –ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º."
                await update.message.reply_text(error_message)
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            user_data[user_id] = {
                'recognized_text': recognized_text,
                'user_name': user_name,
                'user_username': user_username,
                'user_phone': user_phone,
                'user_id': user_id,
                'unique_id': unique_id,
                'processed_count': processed_count,
                'image_hash': image_hash,
                'random_string': random_string,
                'session_id': session_id,
                'used_model': used_model,
                'timestamp': timestamp
            }
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = [
                ["‚úÖ –î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ"],
                ["‚ùå –ù–µ—Ç, –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await update.message.reply_text(
                f"üìù **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n\n{recognized_text}\n\n"
                f"**–¢–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ?**\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            print(f"Error in handle_photo: {e}")
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
        try:
            text = update.message.text
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if user_id not in authorized_users:
                await update.message.reply_text(
                    "üîê **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!**\n\n"
                    "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.",
                    parse_mode='Markdown'
                )
                return
            
            print(f"Text received: '{text}' from user_id: {user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in user_data:
                await update.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∑–∞–Ω–æ–≤–æ.")
                return
            
            data = user_data[user_id]
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
            if text == "‚úÖ –î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ":
                print("User confirmed, sending to group...")
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
                await send_to_group(data, context)
                await update.message.reply_text("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", reply_markup=ReplyKeyboardRemove())
                # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                del user_data[user_id]
                
            elif text == "‚ùå –ù–µ—Ç, –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å":
                print("User wants to edit...")
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                await update.message.reply_text(
                    f"üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞:**\n\n"
                    f"**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n"
                    f"1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∏–∂–µ\n"
                    f"2. –í—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                    f"3. –í–Ω–µ—Å–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n"
                    f"4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç\n\n"
                    f"–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –µ—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
                    reply_markup=ReplyKeyboardRemove(),
                    parse_mode='Markdown'
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=data['recognized_text']
                )
                
                context.user_data['editing_user_id'] = user_id
                
            elif text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É":
                print("User confirmed final edit, sending to group...")
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
                await send_to_group(data, context)
                await update.message.reply_text("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", reply_markup=ReplyKeyboardRemove())
                # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                del user_data[user_id]
                
            elif text == "‚úèÔ∏è –ï—â–µ —Ä–∞–∑ –∏—Å–ø—Ä–∞–≤–∏—Ç—å":
                print("User wants to edit again...")
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –µ—â–µ —Ä–∞–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                await update.message.reply_text(
                    f"üìù **–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:**\n\n"
                    f"**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n"
                    f"1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∏–∂–µ\n"
                    f"2. –í—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                    f"3. –í–Ω–µ—Å–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n"
                    f"4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç\n\n"
                    f"–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –µ—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
                    reply_markup=ReplyKeyboardRemove(),
                    parse_mode='Markdown'
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=data['recognized_text']
                )
                
                context.user_data['editing_user_id'] = user_id
                
            elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
                print("User cancelled...")
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª
                await update.message.reply_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ.", reply_markup=ReplyKeyboardRemove())
                del user_data[user_id]
                if 'editing_user_id' in context.user_data:
                    del context.user_data['editing_user_id']
                    
            else:
                # –≠—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏ —ç—Ç–æ
                editing_user_id = context.user_data.get('editing_user_id')
                if editing_user_id and editing_user_id == user_id:
                    # –≠—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                    await handle_text_edit(update, context)
                else:
                    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
                    await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
                    
        except Exception as e:
            print(f"Error in handle_text: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            if user_id in user_data:
                del user_data[user_id]
            if 'editing_user_id' in context.user_data:
                del context.user_data['editing_user_id']

    async def handle_text_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
        try:
            user_id = context.user_data.get('editing_user_id')
            print(f"Text edit received for user_id: {user_id}")
            
            if not user_id or user_id not in user_data:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∑–∞–Ω–æ–≤–æ.")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            user_data[user_id]['recognized_text'] = update.message.text
            print(f"Updated text: {update.message.text}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            keyboard = [
                ["üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"],
                ["‚úèÔ∏è –ï—â–µ —Ä–∞–∑ –∏—Å–ø—Ä–∞–≤–∏—Ç—å"],
                ["‚ùå –û—Ç–º–µ–Ω–∞"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await update.message.reply_text(
                f"üìù **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n\n{update.message.text}\n\n"
                f"**–¢–µ–∫—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ?**\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if 'editing_user_id' in context.user_data:
                del context.user_data['editing_user_id']
            
        except Exception as e:
            print(f"Error in handle_text_edit: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            if 'editing_user_id' in context.user_data:
                del context.user_data['editing_user_id']

    async def handle_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è"""
        try:
            text = update.message.text
            user_id = update.effective_user.id
            
            print(f"Password attempt from user_id: {user_id}")
            
            if text == "üîê –í–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å":
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
                await update.message.reply_text(
                    "üîê **–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞:**\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
                    reply_markup=ReplyKeyboardRemove(),
                    parse_mode='Markdown'
                )
                return WAITING_FOR_PASSWORD
            elif text == ACCESS_PASSWORD:
                # –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π
                print(f"‚úÖ Correct password from user_id: {user_id}")
                authorized_users[user_id] = True
                
                # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å—Ä–∞–∑—É
                phone_number = context.user_data.get('user_phone', "–ù–µ —É–∫–∞–∑–∞–Ω")
                try:
                    save_authorization(user_id, phone_number)
                except Exception as e:
                    print(f"Warning: failed to persist authorization: {e}")
                await update.message.reply_text(
                    "‚úÖ **–ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç!**\n\n"
                    "–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ —Å —Ä—É–∫–æ–ø–∏—Å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.",
                    reply_markup=ReplyKeyboardRemove(),
                    parse_mode='Markdown'
                )
                return ConversationHandler.END
            else:
                # –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å
                print(f"‚ùå Wrong password from user_id: {user_id}")
                await update.message.reply_text(
                    "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!**\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=ReplyKeyboardRemove()
                )
                return ConversationHandler.END
                
        except Exception as e:
            print(f"Error in handle_password: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END

    async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        try:
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if update.message.contact:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
                phone_number = update.message.contact.phone_number
                print(f"‚úÖ Phone number received from user_id: {user_id}: {phone_number}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                context.user_data['user_phone'] = phone_number
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ —Ñ–∞–π–ª
                save_authorization(user_id, phone_number)
                
                await update.message.reply_text(
                    f"‚úÖ **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏–Ω—è—Ç!**\n\n"
                    f"üì± –í–∞—à –Ω–æ–º–µ—Ä: `{phone_number}`\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ —Å —Ä—É–∫–æ–ø–∏—Å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º!",
                    reply_markup=ReplyKeyboardRemove(),
                    parse_mode='Markdown'
                )
                return ConversationHandler.END
                
            elif update.message.text == "üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞":
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É, –Ω–æ –Ω–µ –ø–æ–¥–µ–ª–∏–ª—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
                await update.message.reply_text(
                    "üì± **–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:**\n\n"
                    "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞'\n"
                    "2. –í –ø–æ—è–≤–∏–≤—à–µ–º—Å—è –æ–∫–Ω–µ –≤—ã–±–µ—Ä–∏—Ç–µ '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è'\n"
                    "3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–º–µ—Ä–∞\n\n"
                    "–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∑–∞—è–≤–æ–∫.",
                    reply_markup=ReplyKeyboardMarkup([["üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞"]], one_time_keyboard=True, resize_keyboard=True),
                    parse_mode='Markdown'
                )
                return WAITING_FOR_PHONE
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                await update.message.reply_text(
                    "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!**\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞' "
                    "–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
                    reply_markup=ReplyKeyboardMarkup([["üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞"]], one_time_keyboard=True, resize_keyboard=True)
                )
                return WAITING_FOR_PHONE
                
        except Exception as e:
            print(f"Error in handle_phone: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END

    async def send_to_group(data, context):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É"""
        try:
            current_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ 1: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–±–µ–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)
            header_text = f"""üìã –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ü–†–û–î–£–ö–¢–´

‚è∞ –í—Ä–µ–º—è –∑–∞—è–≤–∫–∏: {current_time}

üë§ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨:
üì± –ò–º—è: {data['user_name']}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['user_phone']}

ü§ñ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"""

            print("Sending header to group...")
            await context.bot.send_message(chat_id=TARGET_GROUP_ID, text=header_text)

            # –°–æ–æ–±—â–µ–Ω–∏–µ 2: –ß–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
            print("Sending pure text to group...")
            await context.bot.send_message(chat_id=TARGET_GROUP_ID, text=data['recognized_text'])
            print("‚úÖ Messages sent to group successfully")
            
        except Exception as e:
            print(f"Error in send_to_group: {e}")
            # –ï—Å–ª–∏ –¥–∞–∂–µ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—â–µ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π
            try:
                basic_text = f"–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê\n–í—Ä–µ–º—è: {current_time}\n–û—Ç: {data['user_name']}\n\n{data['recognized_text']}"
                await context.bot.send_message(chat_id=TARGET_GROUP_ID, text=basic_text)
                print("‚úÖ Basic message sent to group")
            except Exception as e2:
                print(f"Error sending basic message: {e2}")

    print("6. Registering handlers...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    load_authorizations()
    
    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            WAITING_FOR_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_password)],
        },
        fallbacks=[],
        per_message=False
    )
    
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    print("‚úÖ Handlers registered")

    print("7. Starting GPT-4o Advanced Fixed bot...")
    print("ü§ñ GPT-4o Advanced Fixed –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()

except Exception as e:
    print(f"‚ùå FATAL ERROR: {e}")
    print(f"Error type: {type(e)}")
    import traceback
    traceback.print_exc()
    input("Press Enter to exit...")
